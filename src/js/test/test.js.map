{"version":3,"sources":["test/test.ts"],"names":[],"mappings":"AACA,wDAAwD;AACxD,sDAAsD;AACtD,uCAAuC;AACvC,qCAAqC;AAErC,AAGA;;GADG;AACH,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,uBAAmB,eAAe,CAAC,CAAA;AACnC,AAGA;;GADG;IACC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,IAAI,SAAS,GAAG;IACZ;QACI,KAAK,EAAC,UAAU;QAChB,OAAO,EAAC,UAAU;KACrB;IACD;QACI,KAAK,EAAC,QAAQ;QACd,OAAO,EAAC,QAAQ;KACnB;CACJ,CAAC;AAEF,QAAQ,CAAE,sBAAsB,EAAE;IAC9B,EAAE,CAAE,aAAa,EAAE,UAAC,IAAI;QACpB,MAAM,CAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,EAAE,CAAE,iBAAiB,EAAE,UAAC,IAAI;QACxB,MAAM,CAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAE,kBAAkB,EAAE;IAE1B,EAAE,CAAE,8CAA8C,EAAE,UAAC,IAAI;QACrD,MAAM,CAAE,gBAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,2CAA2C,CAAC,CAAC;QAC7F,MAAM,CAAE,gBAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,uCAAuC,CAAC,CAAC;QACzF,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,EAAE,CAAE,kCAAkC,EAAE,UAAC,IAAI;QACzC,MAAM,CAAE,gBAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CACnD,aAAa;cACP,+CAA+C;cAC/C,2CAA2C;cAC/C,gBAAgB,CACjB,CAAC;QACF,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"test/test.js","sourcesContent":["\n///<reference path=\"../../../typings/mocha/mocha.d.ts\"/>\n///<reference path=\"../../../typings/chai/chai.d.ts\"/>\n///<reference path=\"../lib/Writer.ts\"/>\n///<reference path=\"../lib/Word.ts\"/>\n\n/**\n * Module dependencies\n */\nimport chai = require('chai');\nimport Writer from '../lib/Writer';\n/**\n * Globals\n */\nvar expect = chai.expect;\nvar testWords = [\n    {\n        'key':'download',\n        'value':'download'\n    },\n    {\n        'key':'upload',\n        'value':'upload'\n    }\n];\n\ndescribe ('Testing Envirument: ', () => {\n    it ('should be 6', (done) => {\n        expect (2 + 4).to.equals(6);\n        done();\n    });\n\n    it ('should not be 6', (done) => {\n        expect (2 + 2).to.not.equals(6);\n        done();\n    });\n});\n\ndescribe ('Testing Writer: ', () => {\n\n    it ('should have xml definition in the first line', (done) => {\n        expect (Writer.convert(testWords[0])).to.equals('<string name=\"download\">download</string>');\n        expect (Writer.convert(testWords[1])).to.equals('<string name=\"upload\">upload</string>');\n        done();\n    });\n\n    it ('should wire the correct resource', (done) => {\n        expect (Writer.createResource(testWords)).to.equals(\n        '<resources>'\n            + '\\n\\t<string name=\"download\">download</string>'\n            + '\\n\\t<string name=\"upload\">upload</string>'\n        + '\\n</resources>'\n        );\n        done();\n    });\n});\n\n"],"sourceRoot":"/source/"}